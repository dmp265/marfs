<config>

<name>config-name</name>

# There's some confusion regarding our use of "version" in the config-file.
# We now realize this probably shouldn't be presumed to be the same as the
# version that goes into object-IDs.  The latter version indicates how to
# parse xattrs, and may also concern the format of chunk-info in MD files,
# or the recovery-info in objects.  Those things are all now dictated by
# #defines MARFS_CONFIG_MAJOR/MINOR, which identify the version of the
# SOFTWARE, rather than the config. (See marfs_configuration.h)

# However, there is also the config-reader, which should be able to know
# whether the config file "version" is something it understands.  So,
# that's what the version in the config-file means.

# Changes in minor version are presumed to be backward-compatible, within
# the same major version.  In other words, if you add fields here, you
# could update the minor version, and your config-reader should be able to
# provide defaults for earlier minor versions which did not have that
# field.  However, that doesn't mean older minor-version parsers will
# correctly handle newer minor-versions.  So, parsers should assure that
# the config file they are reading is not newer than they are.

# The version number in the blueprint is not used anywhere, but it is
# recommended that you update it when you make changes, so that we can tell
# which config files might use updating.


<version>0.4</version>

<mnt_top>mount-point under which all namespaces will be placed (e.g. /marfs)</mnt_top>

<mdfs_top>mount-point under which all MDFSes will be placed.  (Forbidden prefix for write paths.)</mdfs_top>


<repo : type=__list>

  # This is the second token in URLS.
  # For Scality sproxyd, this maps to an sproxyd driver-alias
  <name>repo-name (referred to by namespaces)</name>

  <host>host-name-plus-port, (can be ip-addr or hostname, e.g. 10.135.0.22:81)</host>
  <host_offset>unused unless host_count .gt. 1</host_offset>
  <host_count>if >1, sprintf(..., host, host_offset + (rand() % host_count))</host_count>

  # Select which API to use for interacting with Storage.  Each DAL is
  # currently a complete API that can support all the storage-ops used by
  # MARFS.
  #
  ###  <DAL> one_of: OBJ, NO_OP, MCC, POSIX </DAL>
  <dal>
      <type> one_of: OBJECT, NO_OP, MULTI_COMPONENT, POSIX </type>

      # zero or more options.  Each one can be a key_val or a value.
      # The DAL's configure() method will receive these options,
      # translated into xDALConfigOpts.
      <opt : type=__list>
         <key_val> key : value </key_val>
         <value>   value       </value>
      </opt>
  </dal>


  <update_in_place>YES/NO</update_in_place>
  <ssl>YES/NO</ssl>
  <access_method>one-of: DIRECT,SEMI_DIRECT,CDMI,SPROXYD,S3,S3_SCALITY,S3_EMC</access_method>
  <chunk_size>max-number-of-bytes-in-a-UNI-object</chunk_size>
  <max_get_size>largest GET request bytes</max_get_size> # 0 (default) = unconstrained
  <security_method>one-of: NONE,S3_AWS_USER,S3_AWS_MASTER,S3_PER_OBJ,HTTP_DIGEST</security_method>
  <correct_type>one-of: NONE</correct_type>
  <comp_type>one-of: NONE</comp_type>
  <enc_type>one-of: NONE</enc_type>

  # Packing.
  # Set <max_pack_file_count> = 0, to disable packing.
  <min_pack_file_count>min N files for packing. -1=unconstrained</min_pack_file_count>
  <max_pack_file_count>max N files for packing. -1=unconstrained. 0=disabled</max_pack_file_count>
  <min_pack_file_size>min filesize for packing. -1=unconstrained</min_pack_file_size>
  <max_pack_file_size>max filesize for packing. -1=unconstrained</max_pack_file_size>

  # This is an estimate/measure of the time needed to bring an offline repo online
  <latency>milliseconds-for-request-timeout</latency>

  <write_timeout>seconds before a write request is considered to have failed</write_timeout>
  <read_timeout>seconds before a read request is considered to have failed</read_timeout>

  # collect (and log) timing stats for certain operations against this repo
  # NOTE: This tag-name must be identical with similar field in Namespace.
  <timing_flags>one-of: OPEN,RW,CLOSE,RENAME,CRC,ERASURE,THREAD,HANDLE</timing_flags>

</repo>




# One of the namespaces must be the "root" namespace, with mnt_path = "/".
# This corresponds to the top-level fuse mount-point.  It is used to allow
# admins to list namespaces, and for a few other things.
<namespace : type=__list>
  <name>namespace-name</name>

  # This becomes the first token in URLs
  # (e.g. http://host:port/alias/...)  For S3, this maps to a bucket-name,
  # For Scality sproxyd, this maps to a fastcgi proxy
  <alias>namespace alias-name</alias>

  <mnt_path>path-under-mnt-top (single leading slash, e.g. /atorrez)</mnt_path>

  <bperms>subset-of: RM,WM,RD,WD,TD,UD (with commas)</bperms>
  <iperms>subset-of: RM,WM,RD,WD,TD,UD (with commas)</iperms>

  <iwrite_repo_name>repo-name used for all fuse accesses</iwrite_repo_name>
  <range : type=__list>
    <min_size>min-size, for files written to this repo</min_size>
    <max_size>max-size, for files written to this repo (use -1 for unlimited)</max_size>
    <repo_name>repo-name for this range</repo_name>
  </range>

  # For regular namespaces under GPFS, the MD-path should be a distinct
  # file-set.  This allows fast-traversal tools to distinguish namespaces
  # without having to look at the path (which would slow things down).  For
  # the root NS under GPFS, this should point to the root namespace.
  <md_path>dir where MD for this namespace is stored</md_path>

  # When files are deleted they are actually moved to the trash.  The user
  # should not be allowed to see them, and they should not be in the same
  # tree (so that fuse wont see them).  For GPFS, we typically put these
  # under the root file-set.  The GC tools will come and purge these files
  # periodically.  The trash-path for the root NS is never used.
  <trash_md_path>dir where trash for NS is stored</trash_md_path>

  # A tool periodically truncates this file to a size matching the total
  # storage used by all files in this namespace (not counting storage used
  # by files in the trash).  This is compared with quota_space, when anyone
  # attempts to create a new file in this namespace.
  <fsinfo_path>file truncated by quota scripts, used to limit new writes</fsinfo_path>
  <quota_space>bytes allowed for NS storage</quota_space> # -1 for unlimited
  <quota_names>inodes allowed for NS storage</quota_names> # -1 for unlimited

  # collect (and log) timing stats for certain operations against this Namespace.
  # NOTE: This tag-name must be identical with similar field in Repo.
  # NOTE: PA2X fails if the *contents* of this pseudo tag are the same as
  #       the contents of the similar tag in Namespace.
  <timing_flags> (same as Namespace.timing_flags) </timing_flags>

  # Select which API to use for interacting with MDFS.  Each MDAL is
  # curtently a complete API that can support all the MD ops used by
  # MARFS.  However, of the two provided here, we'll only use the dir_mdal
  # for directory ops, and only the file_mdal for file ops.  Default: POSIX
  #
  ###  <dir_MDAL> one_of: POSIX, PVFS2, IOFSL </dir_MDAL>
  ###  <file_MDAL> one_of: POSIX, PVFS2, IOFSL </file_MDAL>

  ## PA2X segfaults, if you try this, and have an mdal without options.
  ##  <mdal : type=__list>
  ##      <domain> one_of: DIR, FILE </domain>
  ##      ...
  ##  </mdal>

   <d_mdal>
      <type> one_of: POSIX, PVFS2, IOFSL </type>

      # zero or more options.  Each one can be a key_val or a value.
      # The DAL's configure() method will receive these options
      <opt : type=__list>
         <key_val> key : value </key_val>
         <value>   value       </value>
      </opt>
  </d_mdal>

   <f_mdal>
      <type> one_of: POSIX, PVFS2, IOFSL </type>

      # zero or more options.  Each one can be a key_val or a value.
      # The DAL's configure() method will receive these options
      <opt : type=__list>
         <key_val> key : value </key_val>
         <value>   value       </value>
      </opt>
  </f_mdal>


</namespace>

</config>
