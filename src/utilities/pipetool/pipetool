#!/usr/bin/python
#
# Copyright (c) 2015, Los Alamos National Security, LLC
# All rights reserved.
# 
# Copyright 2015.  Los Alamos National Security, LLC. This software was produced
# under U.S. Government contract DE-AC52-06NA25396 for Los Alamos National
# Laboratory (LANL), which is operated by Los Alamos National Security, LLC for
# the U.S. Department of Energy. The U.S. Government has rights to use, reproduce,
# and distribute this software.  NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL
# SECURITY, LLC MAKES ANY WARRANTY, EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY
# FOR THE USE OF THIS SOFTWARE.  If software is modified to produce derivative
# works, such modified software should be clearly marked, so as not to confuse it
# with the version available from LANL.
#  
# Additionally, redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
# 
# 3. Neither the name of Los Alamos National Security, LLC, Los Alamos National
# Laboratory, LANL, the U.S. Government, nor the names of its contributors may be
# used to endorse or promote products derived from this software without specific
# prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY LOS ALAMOS NATIONAL SECURITY, LLC AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LOS ALAMOS NATIONAL SECURITY, LLC OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
# OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# 
# -----
# NOTE:
# -----
# MarFS is released under the BSD license.
# 
# MarFS was reviewed and released by LANL under Los Alamos Computer Code identifier:
# LA-CC-15-039.
# 
# MarFS uses libaws4c for Amazon S3 object communication. The original version
# is at https://aws.amazon.com/code/Amazon-S3/2601 and under the LGPL license.
# LANL added functionality to the original work. The original work plus
# LANL contributions is found at https://github.com/jti-lanl/aws4c.
# 
# GNU licenses can be found at http://www.gnu.org/licenses/.

import os
import subprocess
import re
import errno
import argparse
import sys
import random

# Name of the environment-var storing a colon-separated list of batch-FTA hostnames/IPs to be used for transfers
BATCH_FTA_VAR='BATCH_FTAS'
# The name (or complete path) of the remote pipetool script
PIPE_REMOTE_NAME='pipetool_remote'
# Number of bytes to be read/written per iteration
BYTES = 8192

try:
   hstr = os.environ[BATCH_FTA_VAR]
except KeyError:
   print >> sys.stderr, "pipetool: the environment variable '"+BATCH_FTA_VAR+"' is not set, which should contain a colon-separated list of batch-FTA hostnames or IPs"
   exit( errno.ENOKEY )


fail=False
HOSTS = hstr.split(':') # batch-FTAs
host=random.choice(HOSTS)

# Parse cmd line inputs
parser = argparse.ArgumentParser( description="This program provides piping functionality into and out of MarFS via a remote script located on a batch FTA.  It is intended to provide transport of reasonably small files.\nNote: either '-s' or '-r' is required.", formatter_class=argparse.RawTextHelpFormatter )
parser.add_argument( "-v", "--verbose",  help="increase output verbosity", action="store_true" )
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument( "-s", "--store", help="reads from stdin and writes to the specified location", action="store_true" )
group.add_argument( "-r", "--retrieve", help="reads from the specified location and writes to stdout", action="store_true" )
group.add_argument( "-a", "--append", help=argparse.SUPPRESS, action="store_true" )
parser.add_argument( "-f", "--force", help="when used with '-s', overwrites any existing file (ignored with '-r')", action="store_true" )
parser.add_argument( "PATHNAME", help="complete path to the desired input/output location" )
parser.add_argument( "-R", metavar='REMOTE_NAME', help=argparse.SUPPRESS )
args = parser.parse_args()

if ( args.R ):
   PIPE_REMOTE_NAME = args.R

# Get the absolute path to the given file
path = os.path.realpath( args.PATHNAME )

if ( args.verbose ):
   print >> sys.stderr, "pipetool: using batch-FTA \""+host+"\""

# Start pipetool_remote on host with the appropriate arg
if ( args.force  and  args.store ):
   cmd=PIPE_REMOTE_NAME+" 3 "+path
   if ( args.verbose ):
      sys.stderr.write("pipetool: opening connection process for overwrite...")
elif ( args.append ):
   cmd=PIPE_REMOTE_NAME+" 2 "+path
   print >> sys.stderr, "pipetool: warning: append functionality is not currently supported by MarFS"
   if ( args.verbose ):
      sys.stderr.write("pipetool: opening connection process for append...")
elif ( args.store ):
   cmd=PIPE_REMOTE_NAME+" 1 "+path
   if ( args.verbose ):
      sys.stderr.write("pipetool: opening connection process for write...")
else:
   cmd=PIPE_REMOTE_NAME+" 0 "+path
   if ( args.verbose ):
      sys.stderr.write("pipetool: opening connection process for read...")

try:
   ssh = subprocess.Popen([ "ssh", host, cmd ],
                          shell=False,
                          stdin=subprocess.PIPE,
                          stderr=subprocess.PIPE)
except OSError as err:
   if ( args.verbose ):
      print >> sys.stderr, "error detected"
   print >> sys.stderr, "pipetool: error connecting to batch-fta "+host+": {0}".format(err)
   exit( err.errno )

if ( args.verbose ):
   print >> sys.stderr, "done"

# Attempt to store, writing to stdin of pipetool_remote
if( args.store  or  args.append ):
   data = sys.stdin.read(BYTES)

   if ( args.verbose ):
      sys.stderr.write("pipetool: writing to pipe...")
   
   while ( data != "" ):
      try:
         ssh.stdin.write( data )
      except IOError as e:
         if ( e.errno != errno.EPIPE ): #if not a broken pipe, notify immediately
            print >> sys.stderr, "pipetool: ERROR: {0}".format( e )
            exit( e.errno )
         fail=True #if a broken pipe, just note and move on
         break
      data = sys.stdin.read( BYTES )

   if ( args.verbose ):
      print >> sys.stderr, "done"

if ( args.verbose ):
   sys.stderr.write("pipetool: checking output from remote host...")
out, err = ssh.communicate()

# Report errors
if ( err != "" ):
   if ( args.verbose ):
      print >> sys.stderr, "error detected"
   split = err.split( " ", 1 )
   if ( "pipetool_remote:" == split[0] ):
      sys.stderr.write( "pipetool: "+split[-1] )
   elif ( ssh.returncode == 127 ): #command not found
      print >> sys.stderr, "pipetool: could not locate the remote script on batch-FTA \""+host+"\""
   elif ( ssh.returncode == 126 ): #can not execute
      print >> sys.stderr, "pipetool: could not execute the remote script on batch-FTA \""+host+"\""
   else:
      sys.stderr.write( err )
   sys.stderr.flush()
elif ( fail ): #if pipetool_remote never indicated a problem, notify user of broken pipe
   print >> sys.stderr, "pipetool: ERROR: connection to remote host closed unexpectedly"
   exit( errno.EPIPE )
elif ( args.verbose ):
   print >> sys.stderr, "done"

# Pass any appropriate errno back to the user
if ( args.verbose ):
   print >> sys.stderr, "pipetool: operation complete"
exit( ssh.returncode )


